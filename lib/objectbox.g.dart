// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/write/domain/entity/chacter_node.dart';
import 'features/write/domain/entity/journal.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3152252213695055902),
      name: 'Node',
      lastPropertyId: const obx_int.IdUid(5, 6769015259870068923),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2365955299500303196),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 121666955965642863),
            name: 'char',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7442561203662742045),
            name: 'isEnd',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5931542472866017420),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 1249980064427292537),
            relationTarget: 'Node'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6769015259870068923),
            name: 'usedPages',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 1847150215572690996),
            name: 'children',
            targetId: const obx_int.IdUid(1, 3152252213695055902))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4906160380309597809),
      name: 'Journal',
      lastPropertyId: const obx_int.IdUid(4, 7024151124931027117),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1178338533994597232),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5325205126782430747),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3637565735593100518),
            name: 'dateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7024151124931027117),
            name: 'content',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 4906160380309597809),
      lastIndexId: const obx_int.IdUid(1, 1249980064427292537),
      lastRelationId: const obx_int.IdUid(1, 1847150215572690996),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Node: obx_int.EntityDefinition<Node>(
        model: _entities[0],
        toOneRelations: (Node object) => [object.parent],
        toManyRelations: (Node object) =>
            {obx_int.RelInfo<Node>.toMany(1, object.id): object.children},
        getId: (Node object) => object.id,
        setId: (Node object, int id) {
          object.id = id;
        },
        objectToFB: (Node object, fb.Builder fbb) {
          final charOffset = fbb.writeString(object.char);
          final usedPagesOffset = fbb.writeListInt64(object.usedPages);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, charOffset);
          fbb.addBool(2, object.isEnd);
          fbb.addInt64(3, object.parent.targetId);
          fbb.addOffset(4, usedPagesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final isEndParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final charParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final usedPagesParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 12, []);
          final object = Node(
              id: idParam,
              isEnd: isEndParam,
              char: charParam,
              usedPages: usedPagesParam);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.parent.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Node>(object.children, store,
              obx_int.RelInfo<Node>.toMany(1, object.id));
          return object;
        }),
    Journal: obx_int.EntityDefinition<Journal>(
        model: _entities[1],
        toOneRelations: (Journal object) => [],
        toManyRelations: (Journal object) => {},
        getId: (Journal object) => object.id,
        setId: (Journal object, int id) {
          object.id = id;
        },
        objectToFB: (Journal object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final contentOffset = fbb.writeListInt64(object.content);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.dateTime.millisecondsSinceEpoch);
          fbb.addOffset(3, contentOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final contentParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []);
          final object = Journal(
              id: idParam,
              title: titleParam,
              dateTime: dateTimeParam,
              content: contentParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Node] entity fields to define ObjectBox queries.
class Node_ {
  /// See [Node.id].
  static final id = obx.QueryIntegerProperty<Node>(_entities[0].properties[0]);

  /// See [Node.char].
  static final char = obx.QueryStringProperty<Node>(_entities[0].properties[1]);

  /// See [Node.isEnd].
  static final isEnd =
      obx.QueryBooleanProperty<Node>(_entities[0].properties[2]);

  /// See [Node.parent].
  static final parent =
      obx.QueryRelationToOne<Node, Node>(_entities[0].properties[3]);

  /// See [Node.usedPages].
  static final usedPages =
      obx.QueryIntegerVectorProperty<Node>(_entities[0].properties[4]);

  /// see [Node.children]
  static final children =
      obx.QueryRelationToMany<Node, Node>(_entities[0].relations[0]);
}

/// [Journal] entity fields to define ObjectBox queries.
class Journal_ {
  /// See [Journal.id].
  static final id =
      obx.QueryIntegerProperty<Journal>(_entities[1].properties[0]);

  /// See [Journal.title].
  static final title =
      obx.QueryStringProperty<Journal>(_entities[1].properties[1]);

  /// See [Journal.dateTime].
  static final dateTime =
      obx.QueryDateProperty<Journal>(_entities[1].properties[2]);

  /// See [Journal.content].
  static final content =
      obx.QueryIntegerVectorProperty<Journal>(_entities[1].properties[3]);
}
